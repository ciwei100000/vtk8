Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 vtk6 (6.2.0-1) unstable; urgency=medium
 .
   [ James Cowgill ]
   * [0b9b309] Fix FTBFS due to new freetype. (Closes: #779802)
Author: Anton Gladky <gladk@debian.org>
Bug-Debian: https://bugs.debian.org/779802

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- a/Common/Core/vtkUnicodeString.cxx
+++ b/Common/Core/vtkUnicodeString.cxx
@@ -39,7 +39,7 @@
 
 vtkUnicodeString::value_type vtkUnicodeString::const_iterator::operator*() const
 {
-  return vtk_utf8::unchecked::peek_next(this->Position);
+  return utf8::unchecked::peek_next(this->Position);
 }
 
 bool vtkUnicodeString::const_iterator::operator==(const const_iterator& rhs) const
@@ -54,27 +54,27 @@
 
 vtkUnicodeString::const_iterator& vtkUnicodeString::const_iterator::operator++()
 {
-  vtk_utf8::unchecked::next(this->Position);
+  utf8::unchecked::next(this->Position);
   return *this;
 }
 
 vtkUnicodeString::const_iterator vtkUnicodeString::const_iterator::operator++(int)
 {
   const_iterator result(this->Position);
-  vtk_utf8::unchecked::next(this->Position);
+  utf8::unchecked::next(this->Position);
   return result;
 }
 
 vtkUnicodeString::const_iterator& vtkUnicodeString::const_iterator::operator--()
 {
-  vtk_utf8::unchecked::prior(this->Position);
+  utf8::unchecked::prior(this->Position);
   return *this;
 }
 
 vtkUnicodeString::const_iterator vtkUnicodeString::const_iterator::operator--(int)
 {
   const_iterator result(this->Position);
-  vtk_utf8::unchecked::prior(this->Position);
+  utf8::unchecked::prior(this->Position);
   return result;
 }
 
@@ -130,7 +130,7 @@
 vtkUnicodeString::vtkUnicodeString(size_type count, value_type character)
 {
   for(size_type i = 0; i != count; ++i)
-    vtk_utf8::append(character, vtkUnicodeString::back_insert_iterator(this->Storage));
+    utf8::append(character, vtkUnicodeString::back_insert_iterator(this->Storage));
 }
 
 vtkUnicodeString::vtkUnicodeString(const_iterator first, const_iterator last) :
@@ -145,7 +145,7 @@
 
 bool vtkUnicodeString::is_utf8(const std::string& value)
 {
-  return vtk_utf8::is_valid(value.begin(), value.end());
+  return utf8::is_valid(value.begin(), value.end());
 }
 
 vtkUnicodeString vtkUnicodeString::from_utf8(const char* value)
@@ -156,7 +156,7 @@
 vtkUnicodeString vtkUnicodeString::from_utf8(const char* begin, const char* end)
 {
   vtkUnicodeString result;
-  if(vtk_utf8::is_valid(begin, end))
+  if(utf8::is_valid(begin, end))
   {
     result.Storage = std::string(begin, end);
   }
@@ -170,7 +170,7 @@
 vtkUnicodeString vtkUnicodeString::from_utf8(const std::string& value)
 {
   vtkUnicodeString result;
-  if(vtk_utf8::is_valid(value.begin(), value.end()))
+  if(utf8::is_valid(value.begin(), value.end()))
   {
     result.Storage = value;
   }
@@ -193,9 +193,9 @@
 
     try
     {
-      vtk_utf8::utf16to8(value, value + length, vtkUnicodeString::back_insert_iterator(result.Storage));
+      utf8::utf16to8(value, value + length, vtkUnicodeString::back_insert_iterator(result.Storage));
     }
-    catch(vtk_utf8::invalid_utf16&)
+    catch(utf8::invalid_utf16&)
     {
       vtkGenericWarningMacro(<< "vtkUnicodeString::from_utf16(): not a valid UTF-16 string.");
     }
@@ -229,15 +229,15 @@
     throw std::out_of_range("character out-of-range");
 
   std::string::const_iterator iterator = this->Storage.begin();
-  vtk_utf8::unchecked::advance(iterator, offset);
-  return vtk_utf8::unchecked::peek_next(iterator);
+  utf8::unchecked::advance(iterator, offset);
+  return utf8::unchecked::peek_next(iterator);
 }
 
 vtkUnicodeString::value_type vtkUnicodeString::operator[](size_type offset) const
 {
   std::string::const_iterator iterator = this->Storage.begin();
-  vtk_utf8::unchecked::advance(iterator, offset);
-  return vtk_utf8::unchecked::peek_next(iterator);
+  utf8::unchecked::advance(iterator, offset);
+  return utf8::unchecked::peek_next(iterator);
 }
 
 const char* vtkUnicodeString::utf8_str() const
@@ -253,14 +253,14 @@
 std::vector<vtkTypeUInt16> vtkUnicodeString::utf16_str() const
 {
   std::vector<vtkTypeUInt16> result;
-  vtk_utf8::unchecked::utf8to16(this->Storage.begin(), this->Storage.end(), std::back_inserter(result));
+  utf8::unchecked::utf8to16(this->Storage.begin(), this->Storage.end(), std::back_inserter(result));
   return result;
 }
 
 void vtkUnicodeString::utf16_str(std::vector<vtkTypeUInt16>& result) const
 {
   result.clear();
-  vtk_utf8::unchecked::utf8to16(this->Storage.begin(), this->Storage.end(), std::back_inserter(result));
+  utf8::unchecked::utf8to16(this->Storage.begin(), this->Storage.end(), std::back_inserter(result));
 }
 
 vtkUnicodeString::size_type vtkUnicodeString::byte_count() const
@@ -270,7 +270,7 @@
 
 vtkUnicodeString::size_type vtkUnicodeString::character_count() const
 {
-  return vtk_utf8::unchecked::distance(this->Storage.begin(), this->Storage.end());
+  return utf8::unchecked::distance(this->Storage.begin(), this->Storage.end());
 }
 
 bool vtkUnicodeString::empty() const
@@ -296,9 +296,9 @@
 {
   try
   {
-    vtk_utf8::append(character, vtkUnicodeString::back_insert_iterator(this->Storage));
+    utf8::append(character, vtkUnicodeString::back_insert_iterator(this->Storage));
   }
-  catch(vtk_utf8::invalid_code_point&)
+  catch(utf8::invalid_code_point&)
   {
     vtkGenericWarningMacro("vtkUnicodeString::push_back(): " << character << "is not a valid Unicode code point");
   }
@@ -315,7 +315,7 @@
   {
     this->Storage.append(vtkUnicodeString(count, character).Storage);
   }
-  catch(vtk_utf8::invalid_code_point&)
+  catch(utf8::invalid_code_point&)
   {
     vtkGenericWarningMacro("vtkUnicodeString::append(): " << character << "is not a valid Unicode code point");
   }
@@ -341,7 +341,7 @@
   {
     this->Storage.assign(vtkUnicodeString(count, character).Storage);
   }
-  catch(vtk_utf8::invalid_code_point&)
+  catch(utf8::invalid_code_point&)
   {
     vtkGenericWarningMacro("vtkUnicodeString::assign(): " << character << "is not a valid Unicode code point");
   }
@@ -411,11 +411,11 @@
   std::string::const_iterator last = this->Storage.end();
 
   while(from != last && offset--)
-    vtk_utf8::unchecked::advance(from, 1);
+    utf8::unchecked::advance(from, 1);
 
   std::string::const_iterator to = from;
   while(to != last && count--)
-    vtk_utf8::unchecked::advance(to, 1);
+    utf8::unchecked::advance(to, 1);
 
   return vtkUnicodeString(from, to);
 }
--- a/IO/Core/vtkUTF8TextCodec.cxx
+++ b/IO/Core/vtkUTF8TextCodec.cxx
@@ -124,7 +124,7 @@
     throw(std::string("End of Input"));
   }
 
-  getSize = vtk_utf8::internal::sequence_length(c);
+  getSize = utf8::internal::sequence_length(c);
 
   if (0 == getSize)
     throw(std::string("Not enough space"));
@@ -138,7 +138,7 @@
 
   istream::char_type* c1 = c;
 
-  const vtkTypeUInt32 code_point = vtk_utf8::next(c1, &c[getSize]);
+  const vtkTypeUInt32 code_point = utf8::next(c1, &c[getSize]);
 
   return code_point;
 }
